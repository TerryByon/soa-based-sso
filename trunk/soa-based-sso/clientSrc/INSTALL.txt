============
INSTALLATION
============

1. 준비물

	1.1 전달 받은 sso client zip 파일
	1.2 전달 받은 sec 파일
	1.3 전달 받은 client id

2. 압축 해제
	sso client zip파일을 구동시킬 위치에 압축해제 합니다.

3. zip 파일 안의 구성물 확인
	zip파일 안에는 다음과 같은 것들이 존재합니다.

	lib 폴더 그리고 그 하위에 각종 jar 파일들
	sso-client.jar
	startServer.bat
	startServer.sh
	log4j.properties
	config.xml
	INSTALL.txt
	test.sec

4. 설정

	4.1 sec 파일 설정
		전달받은 sec 파일을 zip을 해제한 해당 폴더(test.sec가 위치하는 곳)에 복사합니다.
	4.2 config.xml 파일 수정
		config.xml 파일(utf-8 인코딩 주의)을 열어 전달받은 client id를 my-id 태그의 텍스트 값으로 교체합니다.
		그리고 sec-key-file-name 태그의 텍스트 값에는 위에서 복사한 sec파일명으로 교체합니다.

===============
SSO CLIENT 구동
===============

1. sso client가 설치된 폴더로 이동하여 startServer.bat(또는 startServer.sh)을 실행합니다.

2. 서버가 시작되었음을 화면의 메시지를 통해 확인할 수 있습니다.

===================
SSO CLIENT 사용방법
===================

모든 SSO CLIENT와의 통신은 소켓통신에 xml 자료를 이용하여 주고 받습니다.
요청의 종류는 다음과 같이 2가지 종류가 존재합니다.

1. SSO에 다른 서버로 전송하기 위한 티켓을 요청하는 경우

	[예제]
		<?xml version="1.0" encoding="utf-8"?>
		<root>
			<command>askticket</command>
			<id>user's id</id>
			<data><![CDATA[key1:value1//key2:value2]]></data>
		</root>

	위의 예제와 같이 command값을 askticket으로 설정하고 id에는 해당 사용자를 서로 식별할 수 있는 아이디, data에는 key:value 쌍을 n개(다수개) 이어서 설정합니다.

	이렇게 만들어진 xml을 localhost의 8032포트로 전송하면 이에 대한 응답은 다음과 같습니다.

	[예제]
	<?xml version="1.0" encoding="utf-8"?>
	<root>
		<result>true</result>
		<data>[!CDATA[XYfQnPcy6oYuGFaM6nFMJ0y2pnII0yJyQ225CysSDWUJqOfrr+m4Og==]]</data>
	</root>

	만일 위와 같이 result가 true이고 data에 text가 들어있으면 이를 이용해서 다른 서버에 요청할 수 있도록 브라우저로 전송하면 되고 만일 result가 false인 경우는 다른 이유에서 정상적으로 sso가 처리되지 않은 것이므로 sso 담당자에게 문의아여야 합니다.
	브라우저를 이용해서 다른 서버로 넘어가는 경우에는 sso_ticket이라는 파라미터에 해당 data값을 넣어서 요청하도록 하며 이를 받는 서버는 역시 sso_ticket이라는 파라미터가 있는 경우 sso 요청임을 감지하고 다음과 같은 방식의 요청을 통해 사용자정보를 받아오고 이를 기반으로 읹으을 할 수 있게 됩니다.

2. SSO에 티켓을 이용해 사용자 정보를 요청하는 경우

	sso_ticket이라는 파라미터를 이용해 요청된 경우 sso client를 이용해서 해당 티켓이 유효한지 그렇다면 해당 티켓에 저장된 사용자정보를 가져올 수 있습니다.

	[예제]
	<?xml version="1.0" encoding="utf-8"?>
	<root>
		<command>askuser</command>
		<id></id>
		<data><![CDATA[XYfQnPcy6oYuGFaM6nFMJ0y2pnII0yJyQ225CysSDWUJqOfrr+m4Og==]]></data>
	</root>

	sso_ticket 파라미터의 값을 data 태그의 텍스트에 넣고 역시 localhost의 8030 포트에 열려있는 sso client에 소켓을 통해 위와 같은 xml을 만들어 전송합니다.

	이렇게 전송된 결과는 다음과 같습니다.

	[예제]
	 <?xml version="1.0" encoding="utf-8"?>
		<root>
			<result>true</result>
			<data><![CDATA[id:user's id//key1:value1//key2:value2]]></data>
		</root>

	만일 result값이 false인 경우는 sso 연계가 되지 않은 것인데 sso 티켓발행시 유효시간이 지정되어 있어 이를 넘긴 티켓인 경우이거나 해당 사용자 정보가 없는 경우입니다. 역시 sso 담당자에게 연락하십시오.

	이제 data 태그의 텍스트에서 해당 사용자의 아이디와 기타 속성값들을 취해 정당한지 확인하고 인증처리를 합니다.

